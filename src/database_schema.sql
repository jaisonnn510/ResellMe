-- =====================================================
-- MySQL Database Schema for Ticket Exchange System
-- =====================================================
-- Database: ticket_exchange (or login - based on your configuration)
-- Generated by analyzing PHP project files
-- =====================================================

-- Create database (uncomment if needed)
CREATE DATABASE IF NOT EXISTS ticket_exchange;
USE ticket_exchange;

-- =====================================================
-- Table 1: users
-- Purpose: Store user registration and login information
-- =====================================================
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_full_name (full_name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Table 2: admin_users
-- Purpose: Store admin login credentials for ticket verification
-- =====================================================
CREATE TABLE IF NOT EXISTS admin_users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_username (username)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Table 3: tickets
-- Purpose: Store ticket information for sale and verification
-- =====================================================
CREATE TABLE IF NOT EXISTS tickets (
    ticket_id INT AUTO_INCREMENT PRIMARY KEY,
    event_name VARCHAR(255) NOT NULL,
    location VARCHAR(100) NOT NULL,
    event_date DATE NOT NULL,
    category ENUM('Sports', 'Concerts') NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    pdf_path VARCHAR(500) NOT NULL,
    status ENUM('pending', 'approved', 'rejected', 'sold') DEFAULT 'pending',
    seller_id INT,
    buyer_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_status (status),
    INDEX idx_category (category),
    INDEX idx_location (location),
    INDEX idx_event_date (event_date),
    INDEX idx_price (price),
    INDEX idx_seller_id (seller_id),
    INDEX idx_buyer_id (buyer_id),
    INDEX idx_event_name (event_name),
    FOREIGN KEY (seller_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (buyer_id) REFERENCES users(id) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Table 4: transactions (Optional - for payment tracking)
-- Purpose: Track payment transactions and ticket purchases
-- =====================================================
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT NOT NULL,
    buyer_id INT NOT NULL,
    seller_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',
    payment_method VARCHAR(50),
    transaction_reference VARCHAR(255),
    qr_code_path VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_ticket_id (ticket_id),
    INDEX idx_buyer_id (buyer_id),
    INDEX idx_seller_id (seller_id),
    INDEX idx_payment_status (payment_status),
    INDEX idx_created_at (created_at),
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id) ON DELETE CASCADE,
    FOREIGN KEY (buyer_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (seller_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Table 5: user_sessions (Optional - for session management)
-- Purpose: Track user sessions for better security
-- =====================================================
CREATE TABLE IF NOT EXISTS user_sessions (
    session_id VARCHAR(128) PRIMARY KEY,
    user_id INT NOT NULL,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_expires_at (expires_at),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- Table 6: admin_sessions (Optional - for admin session management)
-- Purpose: Track admin sessions for better security
-- =====================================================
CREATE TABLE IF NOT EXISTS admin_sessions (
    session_id VARCHAR(128) PRIMARY KEY,
    admin_id INT NOT NULL,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    INDEX idx_admin_id (admin_id),
    INDEX idx_expires_at (expires_at),
    FOREIGN KEY (admin_id) REFERENCES admin_users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =====================================================
-- INSERT SAMPLE DATA
-- =====================================================

-- Insert default admin user (password: admin123 - hashed with SHA256)
-- You should change this password after first login
INSERT IGNORE INTO admin_users (username, password) VALUES 
('admin', SHA2('admin123', 256));

-- Insert sample user (password: password123 - hashed with PHP password_hash)
-- You should remove this after testing
INSERT IGNORE INTO users (full_name, email, password) VALUES 
('Test User', 'test@example.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi');

-- =====================================================
-- VIEWS FOR COMMON QUERIES
-- =====================================================

-- View for approved tickets with seller information
CREATE OR REPLACE VIEW approved_tickets AS
SELECT 
    t.ticket_id,
    t.event_name,
    t.location,
    t.event_date,
    t.category,
    t.price,
    t.pdf_path,
    t.status,
    u.full_name as seller_name,
    u.email as seller_email,
    t.created_at
FROM tickets t
LEFT JOIN users u ON t.seller_id = u.id
WHERE t.status = 'approved';

-- View for pending tickets awaiting admin approval
CREATE OR REPLACE VIEW pending_tickets AS
SELECT 
    t.ticket_id,
    t.event_name,
    t.location,
    t.event_date,
    t.category,
    t.price,
    t.pdf_path,
    u.full_name as seller_name,
    u.email as seller_email,
    t.created_at
FROM tickets t
LEFT JOIN users u ON t.seller_id = u.id
WHERE t.status = 'pending';

-- =====================================================
-- STORED PROCEDURES
-- =====================================================

-- Procedure to approve a ticket
DELIMITER //
CREATE PROCEDURE ApproveTicket(IN p_ticket_id INT)
BEGIN
    UPDATE tickets 
    SET status = 'approved', updated_at = CURRENT_TIMESTAMP 
    WHERE ticket_id = p_ticket_id AND status = 'pending';
    
    SELECT ROW_COUNT() as affected_rows;
END //
DELIMITER ;

-- Procedure to reject a ticket
DELIMITER //
CREATE PROCEDURE RejectTicket(IN p_ticket_id INT)
BEGIN
    UPDATE tickets 
    SET status = 'rejected', updated_at = CURRENT_TIMESTAMP 
    WHERE ticket_id = p_ticket_id AND status = 'pending';
    
    SELECT ROW_COUNT() as affected_rows;
END //
DELIMITER ;

-- Procedure to mark ticket as sold
DELIMITER //
CREATE PROCEDURE MarkTicketSold(IN p_ticket_id INT, IN p_buyer_id INT)
BEGIN
    DECLARE v_seller_id INT;
    
    -- Get seller_id from ticket
    SELECT seller_id INTO v_seller_id FROM tickets WHERE ticket_id = p_ticket_id;
    
    -- Update ticket status
    UPDATE tickets 
    SET status = 'sold', buyer_id = p_buyer_id, updated_at = CURRENT_TIMESTAMP 
    WHERE ticket_id = p_ticket_id AND status = 'approved';
    
    -- Insert transaction record
    INSERT INTO transactions (ticket_id, buyer_id, seller_id, amount, payment_status)
    SELECT ticket_id, p_buyer_id, v_seller_id, price, 'completed'
    FROM tickets 
    WHERE ticket_id = p_ticket_id;
    
    SELECT ROW_COUNT() as affected_rows;
END //
DELIMITER ;

-- =====================================================
-- TRIGGERS
-- =====================================================

-- Trigger to automatically update updated_at timestamp
DELIMITER //
CREATE TRIGGER update_tickets_timestamp 
BEFORE UPDATE ON tickets
FOR EACH ROW
BEGIN
    SET NEW.updated_at = CURRENT_TIMESTAMP;
END //
DELIMITER ;

-- Trigger to automatically update updated_at timestamp for users
DELIMITER //
CREATE TRIGGER update_users_timestamp 
BEFORE UPDATE ON users
FOR EACH ROW
BEGIN
    SET NEW.updated_at = CURRENT_TIMESTAMP;
END //
DELIMITER ;

-- Trigger to automatically update updated_at timestamp for admin_users
DELIMITER //
CREATE TRIGGER update_admin_users_timestamp 
BEFORE UPDATE ON admin_users
FOR EACH ROW
BEGIN
    SET NEW.updated_at = CURRENT_TIMESTAMP;
END //
DELIMITER ;

-- =====================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- =====================================================

-- Composite indexes for common query patterns
CREATE INDEX idx_tickets_status_category ON tickets(status, category);
CREATE INDEX idx_tickets_location_category ON tickets(location, category);
CREATE INDEX idx_tickets_date_status ON tickets(event_date, status);

-- =====================================================
-- GRANTS AND PERMISSIONS (Adjust as needed)
-- =====================================================

-- Grant permissions to your application user
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ticket_exchange.* TO 'your_app_user'@'localhost';
-- FLUSH PRIVILEGES;

-- =====================================================
-- NOTES AND RECOMMENDATIONS
-- =====================================================

/*
IMPORTANT NOTES:

1. DATABASE CONFIGURATION:
   - Your project uses two different database names: 'login' and 'ticket_exchange'
   - Update your database.php file to use consistent database name
   - Recommended: Use 'ticket_exchange' as it's more descriptive

2. SECURITY RECOMMENDATIONS:
   - Change default admin password immediately after setup
   - Use prepared statements for all database queries (already implemented in most files)
   - Consider implementing rate limiting for login attempts
   - Add email verification for user registration

3. FILE UPLOADS:
   - Ensure 'uploads/pdfs/' directory exists and is writable
   - Consider adding file size limits and validation
   - Implement virus scanning for uploaded files

4. PERFORMANCE OPTIMIZATIONS:
   - The schema includes appropriate indexes for common queries
   - Consider adding caching for frequently accessed data
   - Monitor query performance and add indexes as needed

5. BACKUP STRATEGY:
   - Implement regular database backups
   - Test backup restoration procedures
   - Consider automated backup solutions

6. ADDITIONAL FEATURES TO CONSIDER:
   - User profile management
   - Ticket rating/review system
   - Email notifications
   - Payment gateway integration
   - Mobile app API endpoints

7. DATA VALIDATION:
   - Add CHECK constraints for price validation (price > 0)
   - Add validation for event_date (not in the past)
   - Consider adding more comprehensive data validation

USAGE INSTRUCTIONS:

1. Create the database:
   mysql -u root -p
   CREATE DATABASE ticket_exchange;
   USE ticket_exchange;
   source database_schema.sql;

2. Update your database.php file to use the correct database name

3. Test the application with the sample data

4. Change default passwords and remove sample data in production

5. Configure proper file permissions for uploads directory
*/
